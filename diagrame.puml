@startuml

class Observer {
  + update(): void
}

class WeatherFetcher {
  - api_key: string
  + _instance: WeatherFetcher
  + get_instance(api_key: string): WeatherFetcher
  + __init__(api_key: string)
  + get_weather(city: string): WeatherData
}

class WeatherData {
  - condition: string
  - temp: int
  - min_temp: int
  - max_temp: int
  - pressure: int
  - humidity: int
  - wind: float
  - sunrise: string
  - sunset: string
  + __init__(json_data: any)
}

class WeatherDataProvider {
  + get_weather(city: string): WeatherData
  + register_observer(observer: Observer): void
  + remove_observer(observer: Observer): void
}

class OpenWeatherMapDataProvider {
  - observers: list[Observer]
  - weather_fetcher: WeatherFetcher
  + __init__(api_key: string)
  + register_observer(observer: Observer): void
  + remove_observer(observer: Observer): void
  + notify_observers(): void
  + get_weather(city: string): WeatherData
}

class WeatherApp {
  - weather_data_provider: WeatherDataProvider
  - text_field: Entry
  - button: Button
  - label1: Label
  - label2: Label
  + __init__(weather_data_provider: WeatherDataProvider)
  + update(): void
  + get_weather_info(): void
}

class WeatherInfoDecorator {
  - weather_data_provider: WeatherDataProvider
  - observers: list[Observer]
  + __init__(weather_data_provider: WeatherDataProvider)
  + get_weather(city: string): WeatherData
  + register_observer(observer: Observer): void
  + remove_observer(observer: Observer): void
  + notify_observers(): void
}

interface Subject {
  + register_observer(observer: Observer): void
  + remove_observer(observer: Observer): void
  + notify_observers(): void
}

Observer <|.. WeatherDataProvider
WeatherFetcher --* WeatherData
WeatherDataProvider -- Observer
WeatherDataProvider <|.. OpenWeatherMapDataProvider
OpenWeatherMapDataProvider o-- WeatherFetcher
WeatherApp -- WeatherDataProvider
WeatherInfoDecorator -- WeatherDataProvider

@enduml
